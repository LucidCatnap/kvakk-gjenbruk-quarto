---
pagetitle: "Presentasjon av KVAKK---- Gjenbruk i egen kode"
format:
    revealjs:
        # Size
        height: 1080
        width: 1920
        # Resources
        # Code
        code-line-numbers: true
        # Misc
        slideNumber: true 
        # Style
        theme: [style.scss, blood]
        highlight-style: atom-one
        code-copy: hover
        code-block-bg: true
        code-block-border-left: "#31BAE9"
        code-block-height: 900px
        incremental: true
        embed-resources: true
---

<!-- Slide 1 - Opening slide -->
# Gjenbruk i egen kode {.title-middle-dark}

<!-- Slide 2 - KVAKK - Best practice -->
## Beste praksis {.centered .smaller}

Bes√∏k KVAKK-siden for √• se p√• alle anbefalingene knyttet til kode og koding

![ü¶Ü](assets/kvakk_gjenbruk-i-egen-kode-1.png){fig-align="center" fig-alt="Bilde av KVAKK-gruppens side om gjenbruk i egen kode"}

::: footer
Klikk [her](<https://statistics-norway.atlassian.net/wiki/x/I4BI0g>) for KVAKKs side om gjenbruk.  <br>
Klikk [her](<https://statistics-norway.atlassian.net/wiki/x/tQBm1>) for beste praksis ved gjenbruk <br>
Klikk [her](<https://statistics-norway.atlassian.net/wiki/x/xACJ1>) for √• lese om SonarCloud       <br>
:::

::: notes
KVAKK-gruppen har lagt ned arbeid i √• samle beste praksis for gjenbruk. Dette er en del av et st√∏rre arbeid for √• samle beste praksis for arbeid i SSB.

I tillegg til KVAKKs side om gjenbruk, finnes det ogs√• en side om beste praksis ved gjenbruk i egen kode og en side om SonarCloud - et verkt√∏y for √• finne kodefeil og sikkerhetsproblemer i koden.

Klikk p√• lenkene for √• lese mer.
:::

<!-- Slide 3 - Benefits of reuse  -->
## Gjenbruk i egen kode

::: {.columns .incremental}
::: {.column}
::: {.smaller}

(@) üö® ___Gjenbruk kan redusere feil___

    Kode skrevet i henhold til beste praksis skal testes og fungere som forventet. Ved √• gjenbruke kode som er testet og fungerer, kan du redusere risikoen for feil.

(@) üöÄ ___Gjenbruk kan √∏ke produktiviteten___

    Gjenbruk kan redusere utviklingstid, og fordi `‚åõ == üí∞`  kan man oppn√• reduserte kostnader 

(@) ü¶Ü ___Gjenbruk kan √∏ke kvaliteten p√• koden___

    Har du en funksjon som fungerte bra i et tidligere prosjekt? Hvorfor ikke utvide og bruke den igjen?

(@) üß© ___Gjenbruk kan redusere kompleksitet___

    Ved √• bryte ned store oppgaver i mindre deler, dokumentere bestandelene, og sette de logisk sammen igjen, er koden mer oversiktlig for deg og dine kj√¶re kolleger.
:::
:::
::: {.column .r-stretch}
![](../assets/code_reuse.png){fig-align="center" fig-alt="Bilde av gjenbrukssymbol rundt symbol for koding" width=700 height=700}
:::
:::

<!-- KVAKK recommendations -->
## Ti punkter om gjenbruk i egen kode

::: {.columns}
<!-- Venstrekolonne -->
::: {.column}
::: {.width-50}
1. Oppdeling
2. Bruk beskrivende navn
3. Gj√∏r funksjoner generiske der det er hensiktsmessig
4. Dokumentasjon
5. Parameterisering
:::
:::
<!-- H√∏yrekolonne -->
::: {.column}
6. Unng√• sideeffekter
7. Enhetstesting
8. Dekomponering av store oppgaver
9. Modulorganisering
10. Bruk av `__init__.py`
:::
::: 

::: {.centered .fragment style="margin-top: 100px; font-size: 3em; color: red;"}
11. Standardisering
:::

::: notes

(1) Oppdeling -  Del opp koden i logisk sammenhengende funksjoner. Hver funksjon b√∏r utf√∏re en bestemt oppgave eller ha et bestemt ansvarsomr√•de. Dette gj√∏r koden enklere √• forst√• og vedlikeholde.

(2) Bruk beskrivende navn - Gi funksjoner (og variabler) beskrivende navn som tydelig indikerer hva de gj√∏r. Dette gj√∏r koden mer selvforklarende og hjelper andre med √• forst√• hensikten til funksjonen.

(3) Gj√∏r funksjoner generiske der det hensiktsmessig - Lag generiske funksjoner der det er hensiktsmessig. Ikke bruk hardkodede verdier og avhengigheter som begrenser bruken av funksjonen. Dette gj√∏r funksjonen mer gjenbrukbar i ulike kontekster.

(4) Dokumentasjon - Legg til kommentarer og dokumentasjon i funksjoner for √• forklare hvordan de skal brukes, hvilke argumenter de tar imot, og hva de returnerer. Dette hjelper andre utviklere og deg selv med √• bruke funksjonene riktig.

(5) Parameterisering - Tillat funksjoner √• v√¶re parametriske ved √• ta inn argumenter. Dette gj√∏r det mulig √• tilpasse funksjonenes atferd ved √• endre inndata.

(6) Unng√• sideeffekter - Unng√• sideeffekter i funksjoner, dvs. endringer i globale tilstander eller variabler utenfor funksjonens omfang. Dette bidrar til √• gj√∏re funksjoner mer forutsigbare og testbare.

(7) Enhetstesting - Lag enhetstester for funksjonene dine. Dette sikrer at de fungerer som forventet, og at endringer i koden ikke introduserer feil.

(8) Dekomponering av store oppgaver - Hvis en funksjon blir for stor eller kompleks, b√∏r du vurdere √• dele den opp i mindre funksjoner. Dette bidrar til √• forbedre lesbarheten og vedlikeholdbarheten.

(9) Modulorganisering - Organiser relaterte funksjoner i moduler/filer og pakk dem i kataloger etter behov. Dette gir en strukturert tiln√¶rming til gjenbruk av kode.

(10) Bruk av __init__.py - Hvis du lager en mappe for en pakke med flere moduler, m√• du inkludere en __init__.py-fil i mappen. Dette gj√∏r mappen til en pakke som kan importeres som en enhet.
:::

<!-- Import slides component -->
{{< include slides/kvakk-anbefalinger.qmd >}}


# Takk for meg! {.centered}

